#!/bin/bash
KUBECONFIG_PATH="/home/fschmidt/.kube/config"
SECRET_NAME="jenkins-kube-credentials"
NAMESPACE="jenkins"

# The label or annotation key/value can vary based on your Jenkins plugin configuration
ANNOTATION_KEY="jenkins.io/credentials-type"
ANNOTATION_VALUE="secretFile"
LABEL_KEY="jenkins.io/credentials-type"
LABEL_VALUE="secretFile"

# Check if the secret already exists
if kubectl get secret $SECRET_NAME -n $NAMESPACE; then
  echo "Secret already exists, updating..."
  kubectl delete secret $SECRET_NAME -n $NAMESPACE
fi

# Create the secret with annotations and labels
kubectl create secret generic $SECRET_NAME \
  --from-file=kubeconfig="$KUBECONFIG_PATH" \
  --namespace $NAMESPACE \
  --dry-run=client -o yaml | kubectl annotate --local -f - \
  $ANNOTATION_KEY=$ANNOTATION_VALUE -o yaml | kubectl label --local -f - \
  $LABEL_KEY=$LABEL_VALUE -o yaml | kubectl apply -f -

echo "Secret created/updated successfully."

# Verification step
echo "Verifying created secret..."
kubectl describe secret $SECRET_NAME -n $NAMESPACE

# Test permission to verify if the Jenkins service account can access secrets
echo "Test permission"
kubectl auth can-i get secrets -n $NAMESPACE --as=system:serviceaccount:jenkins:jenkins-sa

# Providing feedback based on the permission test
PERMISSION_RESULT=$(kubectl auth can-i get secrets -n $NAMESPACE --as=system:serviceaccount:jenkins:jenkins-sa)
if [[ "$PERMISSION_RESULT" =~ "yes" ]]; then
  echo "Service account has the required permission to access secrets."
else
  echo "WARNING: Service account does not have the required permissions to access secrets."
fi