<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@5.7.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git@github.com:FerencSchmidt/StaticProject.git</url>
        <credentialsId>ssh</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/web</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <assignedNode>kubeagent</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
      <![CDATA[
        #!/bin/bash
        echo "======================== START SECTION: AGENT INFO ========================"
        echo "Build node: $NODE_NAME"
        echo "Labels: $NODE_LABELS"

        # Check if kubectl is available
        if command -v kubectl &> /dev/null; then
            echo "kubectl is already installed."
            # Optionally, displaying kubectl version
            kubectl version --client
        else
            echo "kubectl is not installed."
        fi
        echo "======================== END SECTION: AGENT INFO ========================"
      ]]>
      </command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>
      <![CDATA[
        #!/bin/bash
        echo "======================== START SECTION: BUILD ========================"
        pwd
        ls -lah
        kubectl get pods -n jenkins

        # Define path to version file
        VERSION_FILE="$WORKSPACE/Kubernetes/Web/Docker/version.txt"
        DEPLOYMENT_TEMPLATE_PATH="$WORKSPACE/Kubernetes/Web/web-deployment.yaml"
        MODIFIED_DEPLOYMENT_PATH="$WORKSPACE/Kubernetes/Web/modified_web-deployment.yaml"

        # Check if the version file exists and read from it
        if [ -f "$VERSION_FILE" ]; then
            read -r version_tag < $VERSION_FILE
            echo "Version read from file: $version_tag"
            export VERSION_TAG=$version_tag
        else
            echo "version.txt file not found. Failing the build."
            exit 1
        fi

        # Substitute the version tag in the deployment template using envsubst
        VERSION_TAG=$version_tag envsubst '${VERSION_TAG}' < $DEPLOYMENT_TEMPLATE_PATH > $MODIFIED_DEPLOYMENT_PATH
        echo "Deployment file has been updated with new tag: $version_tag"
        cat $MODIFIED_DEPLOYMENT_PATH

        # Apply the deployment
        kubectl apply -f $MODIFIED_DEPLOYMENT_PATH
        if [ $? -ne 0 ]; then
            echo "Failed to apply Kubernetes deployment"
            exit 1
        fi
        echo "Kubernetes Deployment has been applied successfully."

        echo "======================== END SECTION: BUILD ========================"
      ]]>
      </command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <org.csanchez.jenkins.plugins.kubernetes.KubectlBuildWrapper plugin="kubernetes@4306.vc91e951ea_eb_d">
      <serverUrl/>
      <credentialsId>jenkins-sa-secret-text</credentialsId>
    </org.csanchez.jenkins.plugins.kubernetes.KubectlBuildWrapper>
  </buildWrappers>
</project>